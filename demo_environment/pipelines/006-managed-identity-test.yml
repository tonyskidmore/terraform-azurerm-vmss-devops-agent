---

name: "container-test"

trigger: none

variables:
- group: build
- name: containerImage
  value: "ghcr.io/tonyskidmore/azdo-container-image:latest"
- name: poolName
  value: 'vmss-agent-pool-linux-006'
- name: serviceConnection
  value: "demo-vmss"


resources:
  containers:
    - container: ubuntu
      image: '${{ variables.containerImage }}'

jobs:
  - job: identity
    pool:
      name: $(poolName)
    displayName: "Get Azure IDs"
    continueOnError: false
    container: ubuntu

    steps:

      - checkout: self

      - script: |
          env
        displayName: Show environment variables

      - script: |
          source /etc/os-release
          printf "Running on: %s\n" "$PRETTY_NAME"
        displayName: Check operating system version

      - script: |
          sudo apt update > /dev/null 2>&1
          sudo apt install -y jq wget > /dev/null 2>&1
          url=""http://169.254.169.254/metadata/instance?api-version=2021-02-01""
          metadata=$(curl -s \
                          -H Metadata:true \
                          --noproxy "*" \
                          "$url")
          jq <<< "$metadata"
          vmms_instance=$(jq -r '.compute.osProfile.computerName' <<< "$metadata")
          echo "VMSS_INSTANCE: $vmms_instance"
          echo "##vso[task.setvariable variable=VMSS_INSTANCE]$vmms_instance"
        displayName: Metadata

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
            az account show
            tenant_id=$(az account show --query 'tenantId' -o tsv)
            subscription_id=$(az account show --query 'id' -o tsv)
            echo "##vso[task.setvariable variable=SUB_ID;isoutput=true]$subscription_id"
            echo "##vso[task.setvariable variable=TEN_ID;isoutput=true]$tenant_id"
        name: azureIDs
        displayName: Get Azure login IDs

      - script: |
          set -e
          az extension add --yes --name azure-devops
          az extension list
          echo "ORG: $AZURE_DEVOPS_ORGANIZATION"
          pool_id=$(az pipelines pool list --pool-name $(poolName) --query '[].id' -o tsv)
          agents=($(az pipelines agent list --pool-id "$pool_id" --query '[].name' -o tsv))

          for agent in "${agents[@]}"
          do
            echo "agent: $agent"
            if [[ "$agent" != "$VMSS_INSTANCE" && -n "$VMSS_INSTANCE"  ]]; then
              echo "Setting use agent: $agent"
              use_agent=$agent
              break
            else
              echo "Not using $agent because it is the current VMSS host"
            fi
          done
          echo "AGENT_NAME: $use_agent"
          echo "##vso[task.setvariable variable=AGENT_NAME;isoutput=true]$use_agent"
        name: agentName
        displayName: Get ADO Pool Agent
        env:
          AZURE_DEVOPS_EXT_PAT: $(ado_ext_pat)
          AZURE_DEVOPS_ORGANIZATION: $(ado_org)


  - job: terraform
    variables:
      subscriptionID: $[ dependencies.identity.outputs['azureIDs.SUB_ID'] ]
      tenantID: $[ dependencies.identity.outputs['azureIDs.TEN_ID'] ]
      agentName: $[ dependencies.identity.outputs['agentName.AGENT_NAME'] ]
    pool:
      name: $(poolName)
      demands:
        - agent.name -equals $(agentName)
    displayName: "Terraform using managed identity"
    continueOnError: false
    container: ubuntu
    dependsOn: identity

    steps:

      - checkout: self

      - script: |
          echo "$AGENT_NAME"
        displayName: Show agent name
        env:
          AGENT_NAME: $(agentName)

      - script: |
          url="https://releases.hashicorp.com/terraform/"
          url+="$TERRAFORM_VERSION"
          url+="/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          wget --quiet "$url"
          unzip "terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          rm "terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          sudo mv terraform /usr/bin
        displayName: Install Terraform
        env:
          TERRAFORM_VERSION: "1.4.0"

      - script: |
          tf_ver=$(terraform version -json | jq .terraform_version)
          printf "Terraform version installed: %s\n" "$tf_ver"
        displayName: Terraform version

      - script: |
          terraform init
          terraform plan
        workingDirectory: $(System.DefaultWorkingDirectory)/examples/006-managed_identity/terraform
        displayName: Terraform plan
        env:
          TF_IN_AUTOMATION: true
          ARM_USE_MSI: true
          ARM_SUBSCRIPTION_ID: $(subscriptionID)
          ARM_TENANT_ID: $(subscriptionID)
